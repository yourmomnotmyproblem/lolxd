
getgenv().wepMods = false
getgenv().noFall = false

Ydown = getgenv().Ydown
Fov = getgenv().Fov
EspTransparency = getgenv().EspTransparency
chams = getgenv().chams
chamsConnections = getgenv().chamsConnections
silentAim = getgenv().silentAim
aimlock = getgenv().aimlock
antiAim = getgenv().antiAim
pickaxeAura = getgenv().pickaxeAura
tpExploit = getgenv().tpExploit
jumpEnabled = getgenv().jumpEnabled
jump = getgenv().jump
walkEnabled = getgenv().walkEnabled
walk = getgenv().walk
tpPlayer = getgenv().tpPlayer
nameEnabled = getgenv().nameEnabled
targetPart = getgenv().targetPart
hitChance = getgenv().hitChance
smoothness = getgenv().smoothness
boxEsp = getgenv().boxEsp
visibleCheck = getgenv().visibleCheck
aimlockKeybind = getgenv().aimlockKeybind
local noclipLoop
--//
print("Loading kiwi's legit cheat...")

getgenv().targetPlayer = nil
local UserInputService = game:GetService("UserInputService")
local MB = UserInputService:GetMouseButtonsPressed()
local remove = table.remove
local fromRGB = Color3.fromRGB
local espColor = fromRGB(139, 26, 176)
local teamEspColor = fromRGB(61, 176, 26)
local gunName = nil
local hooktoggle = false
local gunName
local localPlayer = game:GetService("Players").LocalPlayer
local currentCamera = workspace.CurrentCamera
local mouse = localPlayer:GetMouse()
local RunService = game:GetService("RunService")
local runService = game:GetService("RunService")
local team = {}
local random = Random.new()
local headSize = 10
local headTrans = 0.8
local headColor = fromRGB(139, 26, 176)
randomNum = random:NextInteger(1, 100)

print("bypassing ac...")
local acTick = tick()
for i, v in pairs(getconnections(game:GetService("ScriptContext").Error)) do
    v:Disable()
end
local functions = {}
for k, b in pairs(getgc()) do
    if type(b) == "function" and getfenv(b).script ~= nil then
        table.insert(functions, b)
    end
end
for i, v in pairs(getconnections(game:GetService("LogService").MessageOut)) do
    if isInTable(functions, v.Function) then
        v:Disable()
    end
end

local function isInTable(table, value)
    for i, v in pairs(table) do
        if v == value then
            return true
        end
    end
    return false
end

if KRNL_LOADED then
    print("Krnl version is messed up, but it's not my fault")
end
print("loading gui elements...")
local guiTick = tick()
-- // Gui
local circle1 = Drawing.new("Circle")
circle1.Visible = true
circle1.Filled = true
circle1.NumSides = 1000
circle1.Radius = 0
circle1.Transparency = 0.5
circle1.Color = Color3.fromRGB(61, 176, 26)
circle1.Position = Vector2.new(currentCamera.ViewportSize.X / 2, currentCamera.ViewportSize.Y / 2)
local ran = 3
local going = true
connection = runService.RenderStepped:Connect(function()
    if circle1 and going then
    ran = ran + 1
    local radCalc = 1 / ran
    radCalc = radCalc * 150
    circle1.Radius = circle1.Radius + radCalc
    if ran >= 60 then
        if circle1.Transparency > 0 then
            circle1.Transparency = circle1.Transparency - 0.01
            else
                going = false
                circle1:Remove()
                if connection then
                connection:Disconnect()
                end
        end
    end

    end
end)
local library = loadstring(game:HttpGet("https://pastebin.com/raw/c2Vu80fC"))()
local Section1 = library:CreateSection("Aim")
local Section2 = library:CreateSection("Visual")
local Section3 = library:CreateSection("Player")
local Section4 = library:CreateSection("Config")
Section1:Toggle(
    "Silent Aim",
    function(bool)
        silentAim = bool
    end
)
Section1:Toggle(
    "Aimlock",
    function(bool)
        aimlock = bool
    end
)
Section3:Toggle(
    "Anti-Aim",
    function(bool)
        antiAim = bool
    end
)
Section3:Toggle(
    "Melee Aura",
    function(bool)
        pickaxeAura = bool
    end
)
Section3:Toggle(
    "Bouncepad/Flintlock TP",
    function(bool)
        tpExploit = bool
    end
)
Section1:Toggle(
    "Visibility Check",
    function(bool)
        visibleCheck = bool
    end
)
Section1:Slider(
    "Smoothness",
    {min = 1, max = 25, precise = true},
    function(slidervalue)
        smoothness = slidervalue
    end
)
Section1:Slider(
    "Field of View",
    {min = 0, max = 500, precise = true},
    function(slidervalue)
        Fov = slidervalue
    end
)
Section1:Slider(
    "Hit Chance",
    {min = 0, max = 100, precise = true},
    function(slidervalue)
        hitChance = slidervalue
    end
)
Section1:Dropdown(
    "Target part",
    {"Head", "UpperTorso", "LowerTorso"},
    function(dropdownvalue)
        targetPart = dropdownvalue
    end
)
Section1:Button(
    "Set Keybind",
    function()
        local function Input(input, gameProcessedEvent)
            local value = input.KeyCode
            if value ~= Enum.KeyCode.Unknown then
                aimlockKeybind = value
                connection:Disconnect()
            end
        end

        connection = UserInputService.InputBegan:Connect(Input)
    end
)

Section1:Slider(
    "Hitbox Size",
    {min = 0, max = 50, precise = true},
    function(slidervalue)
        headSize = slidervalue
    end
)
Section1:Slider(
    "Hitbox Transparency",
    {min = 0, max = 1, precise = true},
    function(slidervalue)
        headSize = slidervalue
    end
)
Section1:ColorPicker(
    "Hitbox Color",
    fromRGB(139, 26, 176),
    function(color)
        headColor = color
    end
)
local hitboxRunning = false
Section1:Button(
    "Set Hitbox Extender",
    function()
        if not hitboxRunning then
            hitboxRunning = true
        game:GetService("Players").playerAdded:Connect(function(player)
            player.CharacterAdded:Connect(function(character)
                if not isInTable(team, player.Name) then
                local head = character:WaitForChild("HumanoidRootPart")
                if head then
                    head.Size = Vector3.new(headSize,headSize,headSize)
                    head.Transparency = headTrans
                    head.CanCollide = false
                    head.Material = "Neon"
                    wait()
                    head.Color = headColor
                end
            end
            end)
        end)
        for i,player in pairs(game:GetService("Players"):GetPlayers()) do
            if player ~= localPlayer and not isInTable(team, player.Name) then
                player.CharacterAdded:Connect(function(character)
                    if not isInTable(team, player.Name) then
                    local head = character:WaitForChild("HumanoidRootPart")
                    if head then
                        head.Size = Vector3.new(headSize,headSize,headSize)
                        head.Transparency = headTrans
                        head.CanCollide = false
                        head.Material = "Neon"
                        wait()
                        head.Color = headColor
                    end
                end
                end)
                if player.Character then
                    if not isInTable(team, player.Name) then
                    local head = player.Character:FindFirstChild("HumanoidRootPart")
                    if head then
                        head.Size = Vector3.new(headSize,headSize,headSize)
                        head.Transparency = headTrans
                        head.CanCollide = false
                        head.Material = "Neon"
                        wait()
                        head.Color = headColor
                    end
                end
                end
            end
        end
    end
end
)


Section2:Toggle(
    "Box ESP",
    function(bool)
        boxEsp = bool
    end
)

Section3:Toggle(
    "Walk Speed Enabled",
    function(bool)
        walkEnabled = bool
    end
)
Section3:Slider(
    "Walk Speed",
    {min = 25, max = 300, precise = false},
    function(slidervalue)
        walk = slidervalue
    end
)
Section3:Toggle(
    "Jump Power Enabled",
    function(bool)
        jumpEnabled = bool
    end
)
Section3:Slider(
    "Jump Power",
    {min = 58, max = 100, precise = false},
    function(slidervalue)
        jump = slidervalue
    end
)
Section3:Toggle(
    "No Fall",
    function(bool)
        noFall = bool
        if noFall then
            pcall(function()
            game.ReplicatedStorage.Remote_Events.Falling_State:FireServer(1)
            end)
        end
    end
)
Section3:Toggle(
    "Enable Noclip Hold Toggle",
    function(bool)
        noclipLoop = bool
    end
)

Section3:Toggle(
    "Airjump",
    function(bool)
        if bool then
            local function Action(Object, Function) if Object ~= nil then Function(Object); end end
            UISconnection = UserInputService.InputBegan:Connect(function(UserInput)
                if bool then
                if UserInput.UserInputType == Enum.UserInputType.Keyboard and UserInput.KeyCode == Enum.KeyCode.Space then
                    Action(localPlayer.Character.Humanoid, function(self)
                        if self:GetState() == Enum.HumanoidStateType.Jumping or self:GetState() == Enum.HumanoidStateType.Freefall then
                            Action(self.Parent.HumanoidRootPart, function(self)
                                self.Velocity = Vector3.new(self.Velocity.X, jump, self.Velocity.Z);
                            end)
                        end
                    end)
                end
            end
            end)
        else
            UISconnection:Disconnect()
        end
    end
)
Section4:Button(
    "Set Keybind Config",
    function()
    local repStore = game:GetService("ReplicatedStorage").Player_Data[localPlayer.Name]
    local kbTable = {}
    for i,v in pairs(repStore:GetChildren()) do
    if string.find(v.Name, "_KB") then
        kbTable[v.Name] = v.Value
    end
end
writefile("KB.txt",game:GetService("HttpService"):JSONEncode(kbTable))

end)
Section4:Button(
    "Load Keybind Config",
    function()
        if isfile("KB.txt") then
        local encoded = readfile("KB.txt")
        local decoded = game:GetService('HttpService'):JSONDecode(encoded)
        local repStore = game:GetService("ReplicatedStorage").Player_Data[localPlayer.Name]
        for i,v in pairs(repStore:GetChildren()) do
            if decoded[v.Name] then
                v.Value = decoded[v.Name]
            end
        end
    end
end)
print("setting up functions...")
local funcTick = tick()
-- // Team List
coroutine.wrap(
    function()
        while true do
            local teamStorage = game:GetService("ReplicatedStorage"):FindFirstChild(constants[2])
            if teamStorage then
                team = {}
                for i, teamFolder in pairs(teamStorage:GetChildren()) do
                    for p, playerValue in pairs(teamFolder:GetChildren()) do
                        if tostring(playerValue.Name) == tostring(localPlayer.Name) then
                            for o, teamValue in pairs(teamFolder:GetChildren()) do
                                table.insert(team, tostring(teamValue.Name))
                            end
                        end
                    end
                end
            end
            wait(3)
        end
    end
)()
wait(0.1)
coroutine.wrap(
    function()
        while wait(0.5) do

            if pickaxeAura then
                for i, v in pairs(game:GetService("Players"):GetPlayers()) do
                    if
                        v ~= localPlayer  and localPlayer.Character and
                            localPlayer.Character:FindFirstChildOfClass("Tool") and
                            localPlayer.Character:FindFirstChildOfClass("Tool"):FindFirstChild(constants[3]) and
                            localPlayer.Character:FindFirstChild("HumanoidRootPart") and
                            v.Character and
                            v.Character:FindFirstChild("HumanoidRootPart") and
                            v.Character:FindFirstChild("Head")
                     then
                        if team == nil or #team == 0 or isInTable(team, v.Name) == false then
                        if
                            (localPlayer.Character.HumanoidRootPart.Position - v.Character.HumanoidRootPart.Position).Magnitude <=
                                16
                         then
                            local pos = currentCamera:WorldToScreenPoint(v.Character.Head.Position)
                            local screenRay = currentCamera:ScreenPointToRay(pos.X, pos.Y, 0.1)
                            local playerRay = Ray.new(screenRay.Origin, screenRay.Direction * 16)

                            game:GetService("ReplicatedStorage").Remote_Events.Melee_Attack:FireServer(
                                v,
                                localPlayer.Character:FindFirstChildOfClass("Tool"),
                                playerRay
                            )
                        end
                    end
                    end
                end
            end
        end
    end
)()
local function getClosestPlayerToCursor(x, y)
    Closest = nil
    local MaxDist, Closest = math.huge
    local Players = game.GetService(game, "Players")
    local LocalPlayer = Players.LocalPlayer
    for I,V in pairs(Players.GetPlayers(Players)) do
        if V == LocalPlayer then continue end
        if not V.Character then continue end
        local Head = V.Character.FindFirstChild(V.Character, targetPart)
        if not Head then continue end
        if team == nil or #team == 0 or isInTable(team, V.Name) == false then
            if visibleCheck == false or isInTable(getgenv().visiblePlayers, V.Name) == true then
        local Pos, Vis = currentCamera.WorldToScreenPoint(currentCamera, Head.Position)
        if not Vis then continue end
        local MousePos, TheirPos = Vector2.new(x, y), Vector2.new(Pos.X, Pos.Y)
        local Dist = (TheirPos - MousePos).Magnitude
        if Dist < MaxDist and (Dist < Fov or Fov == 0) then
            MaxDist = Dist
            Closest = V
        end
    end
end
    end
    return Closest
end

local function createPlayerRay()
    local closestPlayer =
        getClosestPlayerToCursor(
        math.floor(currentCamera.ViewportSize.X / 1.9),
        math.floor((currentCamera.ViewportSize.Y - 72) / 2) + Ydown,
        0.1
    )
    if closestPlayer and wl then
        getgenv().targetPlayer = closestPlayer
        local pos = currentCamera.WorldToScreenPoint(currentCamera,closestPlayer.Character[targetPart].Position)
        local screenRay = currentCamera.ScreenPointToRay(currentCamera,pos.X, pos.Y, 0.1)
        local playerRay = Ray.new(screenRay.Origin, screenRay.Direction * 4000)
        return playerRay
    end
    getgenv().targetPlayer = nil
    return nil
end


local toggled = false
spawn(
    function()
        while wait() do
            if toggled == true then
                wait(1)
                local ended = false
                for i, v in pairs(game.Players:GetPlayers()) do
                    if v.Name == tpPlayer or not nameEnabled then
                    if ended == false then
                        if v ~= game.Players.LocalPlayer then
                            if v.Character and v.Character:FindFirstChild("Humanoid") and v.Character:FindFirstChild("HumanoidRootPart") then
                                if v.Character.Humanoid.Health > 0 then
                                    if team == nil or #team == 0 or isInTable(team, v.Name) == false then
                                        local framepos = v.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, -7)
                                        localPlayer.Character.HumanoidRootPart.Anchored = true
                                        currentCamera.CFrame = v.Character.HumanoidRootPart.CFrame
                                        game.Players.LocalPlayer.Character:MoveTo(
                                            Vector3.new(framepos.X, framepos.Y, framepos.Z)
                                        )

                                        localPlayer.Character.HumanoidRootPart.Anchored = false
                                        ended = true
                                    end
                                end
                            end
                        end
                        end
                    end
                end
                toggled = false
            end
        end
    end
)

local weaponData = require(game.ReplicatedStorage.Modules["Game_Data"])[constants[12]]
local function weaponMods()
if not getgenv().wepMods then
    getgenv().wepMods = true
local rifle = {
    ammoType = constants[10],
    weaponType = constants[11],
    spreadCooldown = 0.25,
    ReloadTime = 1.75,
    kickBackInc = 0.235,
    kickBackCount = 2,
    spreadMultiplier = 150,
    spreadRate = 1,
    maxSpread = 6,
    Mode = "Auto",
    FireRate = 5.75,
    scopeType = "None",
    bulletTravel = 2000,
    distanceAccuracy = 700,
    multiShot = false,
    shotCount = 1,
    maxAmmo = 30,
    weaponDamage = 19,
    projectile = false,
    baseSpread = 1,
    adsBoost = 1.275,
    hasComplexShot = 3
}
for i, v in pairs(getgc(true)) do
    if type(v) == constants[8] then
        local rawCount = 0
        for a, x in pairs(rifle) do
            if rawget(v,a) then
                if tostring(rawget(v,a)) == tostring(x) then
                    rawCount = rawCount + 1
                end
            end
        end
        if rawCount >= 20 and i ~= require(game.ReplicatedStorage.Modules["Game_Data"])[constants[12]][constants[9]] then
            rawCount = 0
            continue
        end
        for a, x in pairs(getgenv().modValues) do
            if rawget(v, a) then

                if isInTable(weaponData, v) == false then
                    rawset(v, a, x)
                end

            end
        end
    end
end
end
end
Section3:Button(
    "Weapon Mods",
    function()
        weaponMods()
    end
)
print("loading esp...")
local espTick = tick()
-- // Player Esp
local function initalizeChams()
local chamsTable = {}
local playerConnection = game.Players.PlayerAdded:Connect(
    function(player)
        if player ~= localPlayer then
            local charConnection = player.CharacterAdded:Connect(
                function(character)
                    wait()
                    local wait1 = character:WaitForChild("Head")
                    local wait2 = character:WaitForChild("HumanoidRootPart")
                    local wait3 = character:WaitForChild("Humanoid")
                    for i, v in pairs(character:GetChildren()) do
                        if v:IsA("Part") or v:IsA("MeshPart") then
                            if v.Name ~= "HumanoidRootPart" then
                                --table.insert(chamsTable, player.Name .. "-" .. v.Name)

                                local box = Instance.new("BoxHandleAdornment")
                                box.Size = v.Size
                                box.ZIndex = 0
                                box.AlwaysOnTop = true
                                box.Transparency = EspTransparency
                                if isInTable(team, player.Name) == false then
                                    box.Color3 = Color3.fromRGB(139, 26, 176)
                                else
                                    box.Color3 = Color3.fromRGB(61, 176, 26)
                                end
                                box.Adornee = v
                                box.Parent = v
                            end
                        end
                    end
                end
            )
            table.insert(chamsConnections, charConnection)
            table.insert(chamsConnections, playerConnection)
        end
    end
)
for i, player in pairs(game.Players:GetPlayers()) do
    if player ~= localPlayer then

        local charConnection2 = player.CharacterAdded:Connect(
            function(character)
                wait()

                local wait1 = character:WaitForChild("Head")
                local wait2 = character:WaitForChild("HumanoidRootPart")
                local wait3 = character:WaitForChild("Humanoid")
                for i, v in pairs(character:GetChildren()) do
                    if v:IsA("Part") or v:IsA("MeshPart") then
                        if v.Name ~= "HumanoidRootPart" then
                            --table.insert(chamsTable, player.Name .. "-" .. v.Name)

                            local box = Instance.new("BoxHandleAdornment")
                            box.Size = v.Size
                            box.ZIndex = 0
                            box.AlwaysOnTop = true
                            box.Transparency = EspTransparency
                            if isInTable(team, player.Name) == false then
                                box.Color3 = Color3.fromRGB(139, 26, 176)
                            else
                                box.Color3 = Color3.fromRGB(61, 176, 26)
                            end
                            box.Adornee = v
                            box.Parent = v
                        end
                    end
                end
            end
        )
        if player.Character then
            local character = player.Character
            local wait1 = character:WaitForChild("Head")
            local wait2 = character:WaitForChild("HumanoidRootPart")
            local wait3 = character:WaitForChild("Humanoid")
            wait()
            for i, v in pairs(character:GetChildren()) do
                if v:IsA("Part") or v:IsA("MeshPart") then
                    if v.Name ~= "HumanoidRootPart" then
                        --table.insert(chamsTable, player.Name .. "-" .. v.Name)

                        local box = Instance.new("BoxHandleAdornment")
                        box.Size = v.Size
                        box.ZIndex = 0
                        box.AlwaysOnTop = true
                        box.Transparency = EspTransparency
                        if isInTable(team, player.Name) == false then
                            box.Color3 = Color3.fromRGB(139, 26, 176)
                        else
                            box.Color3 = Color3.fromRGB(61, 176, 26)
                        end
                        box.Adornee = v
                        box.Parent = v
                    end
                end
            end
        end
        table.insert(chamsConnections, charConnection2)
    end
end

end
if chams then
initalizeChams()
end
local OwlESP = loadstring(game:HttpGetAsync("https://pastebin.com/raw/4JuheYmH"))()
local players = game:GetService("Players")
local runService = game:GetService("RunService")
local localPlayer = players.LocalPlayer
local tracking = {}

local teamCheck = false

local function characterRemoving(char)
    for i, v in next, tracking do
        if v.char == char then
            v:remove()
            remove(tracking, i)
        end
    end
end

local function characterAdded(plr)
    local char = plr.Character
    char:WaitForChild("HumanoidRootPart")
    char:WaitForChild("Head")
    if isInTable(team, plr.Name) == false then
        tracking[#tracking + 1] =
            OwlESP.new(
            {
                plr = plr,
                espBoxVisible = true,
                tracerVisible = true,
                text = plr.Name,
                teamCheck = teamCheck,
                espColor = espColor
            }
        )
    else
        tracking[#tracking + 1] =
            OwlESP.new(
            {
                plr = plr,
                espBoxVisible = true,
                tracerVisible = true,
                text = plr.Name,
                teamCheck = teamCheck,
                espColor = teamEspColor
            }
        )
    end
end

for i, v in next, players:GetPlayers() do
    if v ~= localPlayer then
        local char = v.Character
        if char and char:FindFirstChild("HumanoidRootPart") and char:FindFirstChild("Head") then
            if isInTable(team, v.Name) == false then
                tracking[#tracking + 1] =
                    OwlESP.new(
                    {
                        plr = v,
                        espBoxVisible = true,
                        tracerVisible = true,
                        text = v.Name,
                        teamCheck = teamCheck,
                        espColor = espColor
                    }
                )
            else
                tracking[#tracking + 1] =
                    OwlESP.new(
                    {
                        plr = v,
                        espBoxVisible = true,
                        tracerVisible = true,
                        text = v.Name,
                        teamCheck = teamCheck,
                        espColor = teamEspColor
                    }
                )
            end
        end
        v.CharacterAdded:Connect(
            function()
                if boxEsp then
                    characterAdded(v)
                end
            end
        )
        v.CharacterRemoving:Connect(characterRemoving)
    end
end

local function playerAdded(plr)
    plr.CharacterAdded:Connect(
        function()
            if boxEsp then
                characterAdded(plr)
            end
        end
    )
    plr.CharacterRemoving:Connect(characterRemoving)
end

players.PlayerAdded:Connect(playerAdded)
Section2:Toggle(
    "Chams",
    function(bool)
        chams = bool
        if bool then
        initalizeChams()
        else
            for i,v in pairs(chamsConnections) do
                v:Disconnect()
            end
            chamsConnections = {}
            for i,v in pairs(game:GetService("Players"):GetPlayers()) do
                if v ~= localPlayer and v.Character then
                    for i, v in pairs(v.Character:GetChildren()) do
                        if v:IsA("Part") or v:IsA("MeshPart") then
                            if v.Name ~= "HumanoidRootPart" then
                                local box = v:FindFirstChildOfClass("BoxHandleAdornment")
                                if box then
                                    box:Destroy()
                                end
                            end
                        end
                    end
                end
            end
        end
    end
)
-- //
print("setting metatable hooks...")
local hookTick = tick()
local mt = getrawmetatable(game)
local oldNamecall = mt.__namecall

if setreadonly then
    setreadonly(mt, false)
else
    make_writeable(mt, true)
end
local namecallMethod = getnamecallmethod or get_namecall_method
local newClose = newcclosure or function(f)
        return f
    end
mt.__namecall =
    newClose(
    function(...)
        local method = namecallMethod()
        local args = {...}
        if not checkcaller() and args[1] == game and tostring(method) == "GetService" and args[2] == "LogService" then
            return {GetLogHistory = function()
                end}
        end
        if tostring(args[1]) == constants[7] and tostring(method) == "FireServer" then
            print("fail")
            return
        end
        if not checkcaller() and tostring(method) == constants[14] then
            return Enum.HumanoidStateType.None
        end
        if tostring(args[1]) == constants[5] and tostring(method) == "FireServer" then
            if tostring(args[5]) == "Blunderblast" or tostring(args[5]) == "Flintlock" then
                if tpExploit then
                    if toggled == false then
                        toggled = true
                    end
                end

            end

            if weaponData[tostring(args[5])] then
                for i, v in pairs(args) do
                    if type(v) == "table" and v[constants[13]] then
                        args[i] = weaponData[tostring(args[5])]
                    end
                end
                return oldNamecall(unpack(args))
            else
                print("wep check failed; bullet invalidated")
                return
            end

        end
        if tostring(args[1]) == "Request_Bounce" and method == "InvokeServer" then
            if tpExploit then
                if toggled == false then
                    toggled = true
                end
            end
        end
        if tostring(args[1]) == "Falling_State" and method == "FireServer" then
            if noFall then
                args[2] = 1
                return oldNamecall(unpack(args))
            end
        end
        if not checkcaller() and tostring(method) == "FindPartOnRayWithIgnoreList" then
            if hooktoggle == true and wl then
                if silentAim == true then
                    local scrip = getcallingscript()
                    if scrip == game.Players.LocalPlayer.Character[gunName].Setup.RC then
                            if randomNum <= hitChance then
                                local ray = createPlayerRay()
                                if ray then
                                args[2] = ray
                                return oldNamecall(unpack(args))
                                end
                            end
                    end
                end
            end
        end

        return oldNamecall(...)
    end
)
if setreadonly then
    setreadonly(mt, true)
else
    make_writeable(mt, false)
end
local gmt = getrawmetatable(game)

if setreadonly then
    setreadonly(gmt, false)
else
    make_writeable(gmt, true)
end
local gindex = gmt.__index

gmt.__index = function(tbl, idx)
    if tostring(idx) == "Size" and tostring(tbl) == "HumanoidRootPart" then
        return Vector3.new(1.94494772, 1.02207005, 0.97247386)
    end
    if tostring(tbl) == "Humanoid" and tostring(idx) == "JumpPower" then
        return 58
    end
    if tostring(tbl) == "Humanoid" and wl and tostring(idx) == "WalkSpeed" then
        return 25
    end
    return gindex(tbl, idx)
end
if setreadonly then
    setreadonly(gmt, true)
else
    make_writeable(gmt, false)
end
local OldFunction
local Hook = function(self, ...)
    if self == game:GetService("ReplicatedStorage")["Remote_Events"]["Update_Joints"] then
        if antiAim then
            local args = {...}
            args[1] = getgenv().C1
            args[2] = getgenv().C2
            return OldFunction(self, unpack(args))
        end
    end
    if self == game:GetService("ReplicatedStorage")["Remote_Events"]["Falling_State"]then
        if noFall then
        local args = {...}
        args[1] = 1
        return OldFunction(self, unpack(args))
        end
    end
    return OldFunction(self, ...)
end
OldFunction = hookfunction(Instance.new("RemoteEvent").FireServer, Hook)
-- //
print("loading misc drawing, keybinds, etc...")
local misc = tick()
-- // Drawing
local circle = Drawing.new("Circle")
circle.Visible = true
circle.Transparency = 1
circle.Color = Color3.fromRGB(74, 212, 32)
circle.Thickness = 1
circle.Radius = 100
circle.Filled = false
circle.NumSides = 100
local shiftKeyL = Enum.KeyCode.LeftAlt
local shiftKeyR = Enum.KeyCode.RightAlt
local function Input(input, gameProcessedEvent)
    local value = input.KeyCode
    --print(MB.MouseButton2)
end

UserInputService.InputBegan:Connect(Input)

local function IsKeyDown()
    local buttons = UserInputService:GetMouseButtonsPressed()
    for _, button in pairs(buttons) do
        if tostring(aimlockKeybind) == "MouseButton1" then
            if (button.UserInputType.Name == "MouseButton1") then
                return true
            else
                return false
            end
        end
        if tostring(aimlockKeybind) == "MouseButton2" then
            if (button.UserInputType.Name == "MouseButton2") then
                return true
            else
                return false
            end
        end

        if tostring(aimlockKeybind) == "MouseButton3" then
            if (button.UserInputType.Name == "MouseButton3") then
                return true
            else
                return false
            end
        end
    end
    local aimlockKeybind = tostring(aimlockKeybind)
    if aimlockKeybind == "MouseButton1" or aimlockKeybind == "MouseButton2" or aimlockKeybind == "MouseButton3" then
        return false
    else
        return UserInputService:IsKeyDown(aimlockKeybind)
    end
end
local function IsKeyDownNoclip()
    local buttons = UserInputService:GetMouseButtonsPressed()
    local Noclip = getgenv().Noclip
    for _, button in pairs(buttons) do
        if tostring(Noclip) == "MouseButton1" then
            if (button.UserInputType.Name == "MouseButton1") then
                return true
            else
                return false
            end
        end
        if tostring(Noclip) == "MouseButton2" then
            if (button.UserInputType.Name == "MouseButton2") then
                return true
            else
                return false
            end
        end

        if tostring(Noclip) == "MouseButton3" then
            if (button.UserInputType.Name == "MouseButton3") then
                return true
            else
                return false
            end
        end
    end
    if Noclip == "MouseButton1" or Noclip == "MouseButton2" or Noclip == "MouseButton3" then
        return false
    else
        return UserInputService:IsKeyDown(getgenv().Noclip)
    end
end
local alternate = 0
runService.RenderStepped:Connect(
    function()
        if localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid") then
            if walkEnabled then
            localPlayer.Character.Humanoid.WalkSpeed = walk
            end
            if jumpEnabled then
                localPlayer.Character.Humanoid.JumpPower = jump
            end
        end

        for i, v in next, tracking do
            v:update()
        end

        if visibleCheck then
        alternate = alternate + 1
        if alternate >= 2 and wl then
            alternate = 0
            for i, player in pairs(game:GetService("Players"):GetPlayers()) do
                if player ~= localPlayer and player.Character then
                    local visChar = player.Character
                    local targetVis = targetPart
                    if
                        visChar:FindFirstChild(targetVis)
                     then
                        local pos = currentCamera:WorldToScreenPoint(visChar[targetVis].Position)
                        local screenRay = currentCamera:ScreenPointToRay(pos.X, pos.Y, 0.1)
                        local playerRay = Ray.new(screenRay.Origin, screenRay.Direction * 10000)
                        local hitPart = workspace:FindPartOnRay(playerRay)
                        if hitPart and hitPart:IsDescendantOf(visChar) then
                            if isInTable(getgenv().visiblePlayers, player.Name) == false then
                                table.insert(getgenv().visiblePlayers, player.Name)
                            end
                            for i, v in pairs(visChar:GetChildren()) do
                                if v:IsA("Part") or v:IsA("MeshPart") then
                                    if v.Name ~= "HumanoidRootPart" and v:FindFirstChildOfClass("BoxHandleAdornment") then
                                        v:FindFirstChildOfClass("BoxHandleAdornment").Transparency = 0.8
                                    end
                                end
                            end
                        else
                            if isInTable(getgenv().visiblePlayers, player.Name) == true then
                                local finder = table.find(getgenv().visiblePlayers, player.Name)
                                if finder then
                                    table.remove(getgenv().visiblePlayers, finder)
                                end
                            end
                            for i, v in pairs(visChar:GetChildren()) do
                                if v:IsA("Part") or v:IsA("MeshPart") then
                                    if v.Name ~= "HumanoidRootPart" and v:FindFirstChildOfClass("BoxHandleAdornment") then
                                        v:FindFirstChildOfClass("BoxHandleAdornment").Transparency =
                                            tonumber(EspTransparency)
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
        end

        if noclipLoop and IsKeyDownNoclip() then
            if localPlayer.Character and localPlayer.Character:FindFirstChild("Humanoid") then
                game.Players.LocalPlayer.Character.Humanoid:ChangeState(11)
            end
        end
        randomNum = random:NextInteger(1, 100)
        circle.Radius = Fov
        circle.Position =
            Vector2.new(
            math.floor(currentCamera.ViewportSize.X / 1.9),
            math.floor((currentCamera.ViewportSize.Y - 72) / 2) + Ydown
        )
        if Fov == 0 then
            circle.Visible = false
        else
            circle.Visible = true
        end
        if aimlock == true then
            if IsKeyDown() == true then
                local closePlayer =
                    getClosestPlayerToCursor(
                    math.floor(currentCamera.ViewportSize.X / 1.9),
                    math.floor((currentCamera.ViewportSize.Y - 72) / 2) + Ydown
                )
                if closePlayer then
                    getgenv().targetPlayerAimlock = closePlayer
                    local mouseMoveValue =
                        Vector2.new(
                        math.floor(currentCamera.ViewportSize.X / 1.9),
                        math.floor((currentCamera.ViewportSize.Y - 72) / 2) + Ydown
                    ) -
                        Vector2.new(
                            currentCamera:WorldToViewportPoint(closePlayer.Character[targetPart].Position).X,
                            currentCamera:WorldToViewportPoint(closePlayer.Character[targetPart].Position).Y
                        )
                    mousemoverel(
                        (mouseMoveValue.X / smoothness) * -1,
                        (mouseMoveValue.Y / smoothness) * -1
                    )
                else
                    getgenv().targetPlayerAimlock = nil
                end
            else
                getgenv().targetPlayerAimlock = nil
            end
        else
            getgenv().targetPlayerAimlock = nil
        end
        if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool") and wl then
            if game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool"):FindFirstChild("Setup") then
                gunName = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool").Name
                circle.Visible = true

                if silentAim == true then
                    hooktoggle = true
                else
                    getgenv().targetPlayer = nil
                    hooktoggle = false
                end
            else
                getgenv().targetPlayer = nil
                circle.Visible = false
                hooktoggle = false
            end
        else
            getgenv().targetPlayer = nil
            circle.Visible = false
            hooktoggle = false
        end
        for p, o in pairs(game.Players:GetPlayers()) do
            if o.Character then
                if o.Character:FindFirstChild("Humanoid") and o.Character:FindFirstChild("Humanoid").Health <= 0 then
                    for i, v in next, tracking do
                        if v.char == o.Character then
                            v:remove()
                            remove(tracking, i)
                        end
                    end
                end
            end
        end
    end
)
library:Ready()
print("Loaded in " .. tick() - startTick)
local function initLibrary()
    local library = {flags = {}, callbacks = {}, rainbowI = 0};

    local GetService = game.GetService;
    local Players = GetService(game, "Players");
    local RunService = GetService(game, "RunService");
    local CoreGui = GetService(game, "CoreGui");
    local TweenService = GetService(game, "TweenService");
    local UserInputService = GetService(game, "UserInputService");

    local LocalPlayer = Players.LocalPlayer;

    do -- library funcs
        coroutine.wrap(function()
            while true do
                for i = 0, 359 do
                    library.rainbowI = i / 359;
                    library.rainbowVal = Color3.fromHSV(i / 359, 1, 1);
                    wait();
                end;
            end;
        end)();

        function library:Create(class, data)
            local obj = Instance.new(class);
            for i, v in next, data do
                if i ~= 'Parent' then
                    if typeof(v) == "Instance" then
                        v.Parent = obj;
                    else
                        obj[i] = v
                    end
                end
            end

            obj.Parent = data.Parent;
            return obj;
        end;

        function library:Dragger(main, second)
            local dragging;
            local dragInput;
            local dragStart;
            local startPos;

            local function update(input)
                local delta = input.Position - dragStart;
                second:TweenPosition(UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y),'Out','Sine',0.01,true);
            end;

            main.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true;
                    dragStart = input.Position;
                    startPos = second.Position;

                    repeat wait() until input.UserInputState == Enum.UserInputState.End;
                    dragging = false;
                end;
            end);

            main.InputChanged:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement then
                    dragInput = input;
                end;
            end);

            game:GetService("UserInputService").InputChanged:Connect(function(input)
                if input == dragInput and dragging then
                    update(input);
                end;
            end);
        end;

        function library:Tween(instance, properties, callback)
            local callback = callback or function() end;
            local time = properties.time;
            properties.time = nil;
            local anim = TweenService:Create(instance, TweenInfo.new(time), properties);

            anim.Completed:Connect(callback);
            anim:Play();
            return anim;
        end;

        local ui_Settings = {
            mainColor = Color3.fromRGB(36, 36, 36);
            bottomColor = Color3.fromRGB(34, 34, 34);
            borderColor = Color3.fromRGB(42, 42, 42);
            scrollingBarColor = Color3.fromRGB(115, 41, 255);
            toggleColor = Color3.fromRGB(34, 34, 34);
            toggleBorderColor = Color3.fromRGB(102, 41, 255);
            boxColor = Color3.fromRGB(32, 32, 32);
            boxBorderColor = Color3.fromRGB(102, 41, 255);
            gradientColorSection = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.fromRGB(102, 41, 255)), ColorSequenceKeypoint.new(1, Color3.fromRGB(122, 41, 255))};
            gradientColor = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.fromRGB(74, 212, 32)), ColorSequenceKeypoint.new(0, Color3.fromRGB(74, 232, 52)), ColorSequenceKeypoint.new(1, Color3.fromRGB(210, 74, 255))};
            shadowGradientColor = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.fromRGB(20, 20, 20)), ColorSequenceKeypoint.new(1, Color3.fromRGB(36, 36, 36))};
        };

        UserInputService.InputBegan:Connect(function(input)
            for i, v in next, library.flags do
                if(v == input.KeyCode) then
                    library.callbacks[i]();
                elseif(v == input.UserInputType) then
                    library.callbacks[i]();
                end;
            end;
        end);

        local gui = Instance.new("ScreenGui", CoreGui);
        gui.Enabled = false;
        library.gui = gui;

        UserInputService.InputBegan:Connect(function(Input, gameProcessedEvent)
        if gameProcessedEvent then return end

        if Input.KeyCode == Enum.KeyCode.RightControl then
                gui.Enabled = not gui.Enabled
        end
        end)

        local main = library:Create("Frame", {
            Name = "main";
            Parent = gui;
            Position = UDim2.new(0.5, -200, 0.5, -135);
            BorderSizePixel = 0;
            BackgroundColor3 = ui_Settings.mainColor; -- main color
            Size = UDim2.new(0, 400,0, 270);
            library:Create("ImageLabel", {
                Name = "Search";
                BackgroundTransparency = 1.000;
                Position = UDim2.new(0, 4, 0, 46);
                Size = UDim2.new(1, -8, 0, 26);
                Image = "rbxassetid://4641155515";
                ImageColor3 = Color3.fromRGB(30, 30, 30);
                ScaleType = Enum.ScaleType.Slice;
                SliceCenter = Rect.new(4, 4, 296, 296);
                library:Create("TextBox", {
                    Name = "textbox";
                    BackgroundTransparency = 1.000;
                    Position = UDim2.new(1, -362, 0, 0);
                    Size = UDim2.new(1, -30, 1, 0);
                    Font = Enum.Font.Gotham;
                    PlaceholderText = "Search";
                    Text = "";
                    TextColor3 = Color3.fromRGB(255, 255, 255);
                    TextSize = 14.000;
                    TextXAlignment = Enum.TextXAlignment.Left;
                });
                library:Create("ImageLabel", {
                    Name = "icon";
                    BackgroundTransparency = 1.000;
                    Position = UDim2.new(0, 2, 0, 1);
                    Size = UDim2.new(0, 24, 0, 24);
                    Image = "http://www.roblox.com/asset/?id=4645651350";
                    library:Create("UIGradient", {
                        Color = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.fromRGB(39, 133, 255)), ColorSequenceKeypoint.new(1, Color3.fromRGB(210, 74, 255))};
                        Rotation = 45;
                    });
                });
            });
            library:Create("Frame", {
                Name = "border";
                BackgroundColor3 = ui_Settings.bottomColor;
                BorderColor3 = ui_Settings.borderColor;
                BorderSizePixel = 1;
                Position = UDim2.new(0, 5, 0, 78);
                Size = UDim2.new(0, 390, 0, 186);
                library:Create("Frame", {
                    Name = "shadow";
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255);
                    BackgroundTransparency = 0.100;
                    BorderSizePixel = 0;
                    Position = UDim2.new(0, 0, 1, -8);
                    Size = UDim2.new(1, 0, 0, 8);
                    library:Create("UIGradient", {
                        Color = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.fromRGB(20, 20, 20)), ColorSequenceKeypoint.new(1, Color3.fromRGB(36, 36, 36))};
                        Rotation = 270;
                        Transparency = NumberSequence.new{NumberSequenceKeypoint.new(0.00, 0.00), NumberSequenceKeypoint.new(1.00, 1.00)};
                    });
                });
                library:Create("Frame", {
                    Name = "shadow";
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255);
                    BackgroundTransparency = 0.100;
                    BorderSizePixel = 0;
                    Size = UDim2.new(1, 0, 0, 8);
                    library:Create("UIGradient", {
                        Color = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.fromRGB(20, 20, 20)), ColorSequenceKeypoint.new(1, Color3.fromRGB(36, 36, 36))};
                        Rotation = 90;
                        Transparency = NumberSequence.new{NumberSequenceKeypoint.new(0.00, 0.00), NumberSequenceKeypoint.new(1.00, 1.00)};
                    });
                });
            });
            library:Create("Frame", {
                Name = "bar";
                BorderSizePixel = 0;
                BackgroundColor3 = Color3.fromRGB(255, 255, 255); -- bar color
                Size = UDim2.new(1, 0,0, 4);
                Position = UDim2.new(0, 0, 0, 0);
                library:Create("UIGradient", {
                    Color = ui_Settings.gradientColor;
                });
                library:Create("Frame", {
                    Name = "bottom";
                    BorderSizePixel = 0;
                    BackgroundColor3 = ui_Settings.bottomColor;
                    Position = UDim2.new(0, 0, 0, 4);
                    Size = UDim2.new(1, 0, 0, 34);
                    library:Create("Frame", {
                        BackgroundTransparency = 0.1;
                        BackgroundColor3 = Color3.fromRGB(255, 255, 255);
                        BorderSizePixel = 0;
                        Name = "shadow";
                        Position = UDim2.new(0, 0, 1, 0);
                    });
                    library:Create("TextLabel", {
                        Name = "Title";
                        BackgroundTransparency = 1;
                        Position = UDim2.new(0, 10, 0.5, -10);
                        Size = UDim2.new(0, 70, 0, 24);
                        TextColor3 = Color3.fromRGB(255, 255, 255);
                        Text = "KiWi Vision";
                        Font = "GothamSemibold";
                        TextSize = 14;
                        library:Create("UIGradient", {
                            Color = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.fromRGB(39, 133, 255)), ColorSequenceKeypoint.new(1, Color3.fromRGB(210, 74, 255))}
                        });
                    });
                    library:Create("Frame", {
                        Name = "topcontainer";
                        BackgroundTransparency = 1;
                        BorderSizePixel = 0;
                        Position = UDim2.new(0, 88, 0, 9);
                        Size = UDim2.new(1, -90, 0.73, 0);
                        library:Create("UIListLayout", {
                            Padding = UDim.new(0, 2);
                            FillDirection = "Horizontal";
                            HorizontalAlignment = "Left";
                            SortOrder = "LayoutOrder";
                            VerticalAlignment = "Top";
                        });
                    });
                });
            });
        });

        local modal = Instance.new("TextButton", main);
        modal.Modal = true;
        modal.BackgroundTransparency = 1;
        modal.Text = "";

        main.Search.textbox.Changed:Connect(function()
            local Entry = main.Search.textbox.Text:lower();

            if(Entry ~= "") then
                for i,v in next, library.currentSection:GetChildren() do
                    if(not v:IsA("UIPadding") and not v:IsA("UIListLayout")) then
                        local label = v:FindFirstChild("label");
                        local button = v:FindFirstChild("button");

                        local find = false;
                        if(label and label.Text:gsub("%s", ""):lower():sub(1, #Entry) == Entry) then
                            v.Visible = true;
                            find = true;
                        end;

                        if(button and button:FindFirstChild("label") and button.label.Text:gsub("%s", ""):lower():sub(1, #Entry) == Entry) then
                            v.Visible = true;
                            find = true;
                        end;

                        if(not find) then
                            v.Visible = false;
                        end;
                    end;
                end;
            elseif library.currentSection then
                for i,v in next, library.currentSection:GetChildren() do
                    if(not v:IsA("UIPadding") and not v:IsA("UIListLayout")) then
                        v.Visible = true;
                    end;
                end;
            end;

            library.currentSectionObject:Update();
        end);

        library:Dragger(main.bar.bottom, main);
        function library:Ready()
            gui.Enabled = true;
        end;

        function library:CreateSection(name)
            local topContainer = gui.main.bar.bottom.topcontainer;

            local sectionSelector = library:Create("ImageButton", {
                Parent = topContainer;
                BackgroundTransparency = 1;
                Size = UDim2.new(0, 60, 1, 0);
                Image = "rbxassetid://4641155773";
                ImageColor3 = Color3.fromRGB(255, 255, 255);
                ScaleType = "Slice";
                SliceCenter = Rect.new(4, 4, 296, 296);
                SliceScale = 1;
                Name = "back";
                library:Create("UIGradient", {
                    Color = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.fromRGB(102, 41, 255)), ColorSequenceKeypoint.new(1, Color3.fromRGB(132, 41, 255))}
                });
                library:Create("TextLabel", {
                    BackgroundTransparency = 1;
                    Text = name;
                    Size = UDim2.new(1, 0, 1, 0);
                    TextColor3 = Color3.fromRGB(255, 255, 255);
                });
            });

            local boxContainer = library:Create("ScrollingFrame", {
                Name = "box";
                BorderSizePixel = 0;
                BackgroundColor3 = Color3.fromRGB(34, 34, 34);
                Parent = main.border;
                Position = UDim2.new(0, 1, 0, 1);
                Size = UDim2.new(1, -2, 1, -2);
                BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png";
                TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png";
                ScrollBarThickness = 4;
                CanvasSize = UDim2.new(0, 0, 0, 0);
                library:Create("UIPadding", {
                    PaddingTop = UDim.new(0, 2);
                    PaddingLeft = UDim.new(0, 2);
                });
                library:Create("UIListLayout", {
                    Padding = UDim.new(0, 5);
                    FillDirection = "Vertical";
                    HorizontalAlignment = "Left";
                    VerticalAlignment = "Top";
                });
            });

            local section = {};

            boxContainer.ChildAdded:Connect(function(Obj)
                section:Update();
            end);

            if(not library.currentSection) then
                library.currentSectionSelector = sectionSelector;
                library.currentSection = boxContainer;
                library.currentSectionObject = section;

                library.currentSectionSelector.ImageColor3 = Color3.fromRGB(150, 150, 150);
                boxContainer.Visible = true;
            else
                boxContainer.Visible = false;
            end;

            sectionSelector.MouseButton1Click:Connect(function()
                if(library.currentSection) then
                    library.currentSectionSelector.ImageColor3 = Color3.fromRGB(255, 255, 255);
                    library.currentSection.Visible = false;
                end;

                sectionSelector.ImageColor3 = Color3.fromRGB(150, 150, 150);
                boxContainer.Visible = true;
                library.currentSectionSelector = sectionSelector;
                library.currentSection = boxContainer;
            end);

            function section:Update()
                local CanvasSize = UDim2.new(0, 0, 0, 85)
                for i,v in next, boxContainer:GetChildren() do
                    if(not v:IsA("UIListLayout") and not v:IsA("UIPadding") and v.Visible) then
                        CanvasSize = CanvasSize + UDim2.new(0, 0, 0, v.AbsoluteSize.Y + 5);
                    end;
                end;

                library:Tween(boxContainer, {time = 0.1, CanvasSize = CanvasSize});
            end;

            function section:Label(labelName)
                local holder = library:Create("Frame", {
                    Name = "holder";
                    Parent = boxContainer;
                    BackgroundColor3 = Color3.fromRGB(25, 25, 25);
                    BorderSizePixel = 0;
                    Position = UDim2.new(0, 0, 0, 350);
                    Size = UDim2.new(1, 0, 0, 18);
                    library:Create("TextLabel", {
                        Name = "label";
                        BackgroundTransparency = 1.000;
                        Size = UDim2.new(1, 0, 1, 0);
                        Font = "Gotham";
                        Text = labelName;
                        TextColor3 = Color3.fromRGB(255, 255, 255);
                        TextSize = 12.000;
                    });
                });
            end;

            function section:Toggle(toggleName, callback)
                local callback = callback or function() end;
                local toggle = false;

                library.flags[toggleName] = toggle;

                local holder = library:Create("Frame", {
                    BackgroundTransparency = 1;
                    Parent = boxContainer;
                    Size = UDim2.new(1, -20, 0, 18);
                    Name = "holder";
                    library:Create("TextLabel", {
                        Name = "label";
                        BackgroundTransparency = 1;
                        TextColor3 = Color3.fromRGB(255, 255, 255);
                        Position = UDim2.new(0, 22, 0, 0);
                        Size = UDim2.new(1, -22, 1, 0);
                        Font = "Gotham";
                        TextXAlignment = "Left";
                        TextSize = 12;
                        Text = toggleName;
                    });
                    library:Create("TextButton", {
                        Name = "toggle";
                        AutoButtonColor = false;
                        BackgroundColor3 = ui_Settings.toggleColor;
                        BorderColor3 = ui_Settings.toggleBorderColor;
                        BorderSizePixel = 1;
                        Size = UDim2.new(0, 16, 0, 16);
                        Text = "";
                        library:Create("Frame", {
                            BackgroundColor3 = Color3.fromRGB(255, 255, 255);
                            Size = toggle and UDim2.new(1, 0, 1, 0) or UDim2.new(0, 0, 0, 0);
                            Name = "fill";
                            BorderSizePixel = 0;
                            library:Create("UIGradient", {
                                Color = ui_Settings.gradientColorSection;
                                Rotation = 45;
                            });
                        });
                        library:Create("UIListLayout", {
                            FillDirection = "Vertical";
                            HorizontalAlignment = "Center";
                            VerticalAlignment = "Center";
                        });
                        library:Create("UIPadding", {
                            PaddingBottom = UDim.new(0, 1);
                            PaddingTop = UDim.new(0, 1);
                            PaddingLeft = UDim.new(0, 1);
                            PaddingRight = UDim.new(0, 1);
                        });
                    });
                });

                local function onClick()
                    toggle = not toggle;
                    library:Tween(holder.toggle.fill, {time = 0.1, Size = toggle and UDim2.new(1, 0, 1, 0) or UDim2.new(0, 0, 0, 0)});
                    library.flags[toggleName] = toggle;
                    callback(toggle);
                end;

                holder.toggle.MouseButton1Click:Connect(onClick);
                return holder;
            end;

            function section:Box(boxName, callback)
                local holder = library:Create("Frame", {
                    Size = UDim2.new(1, -20, 0, 18);
                    BackgroundTransparency = 1;
                    Name = "holder";
                    Parent = boxContainer;
                    library:Create("TextLabel", {
                        BackgroundTransparency = 1;
                        Name = "label";
                        TextColor3 = Color3.fromRGB(255, 255, 255);
                        Text = boxName;
                        TextSize = 12;
                        Font = "Gotham";
                        Size = UDim2.new(1, 0, 1, 0);
                        TextXAlignment = "Left";
                    });
                    library:Create("TextBox", {
                        BackgroundColor3 = Color3.fromRGB(32, 32, 32);
                        BorderColor3 = ui_Settings.boxBorderColor;
                        BorderSizePixel = 1;
                        Name = "textbox";
                        TextSize = 14;
                        Position = UDim2.new(1, -160, 0, 0);
                        Size = UDim2.new(0, 160, 1, 0);
                        PlaceholderColor3 = Color3.fromRGB(200, 200, 200);
                        PlaceholderText = "Value";
                        Text = "";
                        TextColor3 = Color3.fromRGB(255, 255, 255);
                        Font = "SourceSans";
                    });
                });

                holder.textbox.FocusLost:Connect(function(Enter)
                    if(Enter) then
                        library.flags[boxName] = holder.textbox.Text;
                        callback(holder.textbox.Text);
                    end;
                end);
            end;

            function section:Slider(sliderName, properties, callback)
                local callback = callback or function() end;
                library.flags[sliderName] = properties.min;

                local holder = library:Create("Frame", {
                    Size = UDim2.new(1, -20, 0, 36);
                    BackgroundTransparency = 1;
                    Name = "holder";
                    Parent = boxContainer;
                    library:Create("TextLabel", {
                        Name = "label";
                        BackgroundColor3 = Color3.fromRGB(255, 255, 255);
                        BackgroundTransparency = 1.000;
                        Size = UDim2.new(1, 0, 0, 17);
                        Font = "Gotham";
                        Text = sliderName;
                        TextColor3 = Color3.fromRGB(255, 255, 255);
                        TextSize = 12.000;
                        TextXAlignment = "Left";
                    });
                    library:Create("TextButton", {
                        Name = "slider";
                        BackgroundColor3 = Color3.fromRGB(34, 34, 34);
                        BorderColor3 = Color3.fromRGB(102, 41, 255);
                        Position = UDim2.new(0, 0, 1, -19);
                        Size = UDim2.new(1, 0, 0, 16);
                        AutoButtonColor = false;
                        Font = "SourceSans";
                        Text = "";
                        TextColor3 = Color3.fromRGB(0, 0, 0);
                        TextSize = 14.000;
                        library:Create("TextLabel", {
                            Name = "value";
                            BackgroundTransparency = 1;
                            Size = UDim2.new(1, 0, 1, 0);
                            Font = "SourceSans";
                            Text = properties.default and tostring(properties.default) or tostring(properties.min);
                            TextColor3 = Color3.fromRGB(255, 255, 255);
                            TextSize = 14.000;
                            ZIndex = 2;
                        });
                        library:Create("Frame", {
                            BackgroundColor3 = Color3.fromRGB(255, 255, 255);
                            Position = UDim2.new(0, 1, 0, 1);
                            Name = "fill";
                            Size = UDim2.new(0, 0, 1, -2);
                            BorderSizePixel = 0;
                            library:Create("UIGradient", {
                                Color = ui_Settings.gradientColorSection;
                                Rotation = 90;
                            });
                        });
                    });
                });

                local Connection;
                UserInputService.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        if(Connection) then
                            Connection:Disconnect();
                            Connection = nil;
                        end;
                    end;
                end);

                holder.slider.MouseButton1Down:Connect(function()
                    if(Connection) then
                        Connection:Disconnect();
                    end;

                    Connection = RunService.Heartbeat:Connect(function()
                        local mouse = UserInputService:GetMouseLocation();
                        local percent = math.clamp((mouse.X - holder.slider.AbsolutePosition.X) / (holder.slider.AbsoluteSize.X), 0, 1);
                        local Value = properties.min + (properties.max - properties.min) * percent;

                        if not properties.precise then
                            Value = math.floor(Value);
                        end;

                        Value = tonumber(string.format("%.2f", Value));

                        library:Tween(holder.slider.fill, {time = 0.1, Size = UDim2.new(percent, 0, 1, -2)})
                        holder.slider.value.Text = tostring(Value);
                        library.flags[sliderName] = Value;

                        callback(Value);
                    end);
                end);
            end;

            function section:Bind(bindName, defaultKey, callback)
                local callback = callback or function() end;
                local input = defaultKey and tostring(defaultKey):gsub("Enum.", ""):gsub("UserInputType.", ""):gsub("KeyCode.", "") or "None";
                library.callbacks[bindName] = callback;
                library.flags[bindName] = defaultKey;

                local holder = library:Create("Frame", {
                    Name = "holder";
                    Parent = boxContainer;
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255);
                    BackgroundTransparency = 1.000;
                    LayoutOrder = 2;
                    Position = UDim2.new(0, 10, 0, 76);
                    Size = UDim2.new(1, -20, 0, 18);
                    library:Create("TextLabel", {
                        Name = "label";
                        BackgroundColor3 = Color3.fromRGB(255, 255, 255);
                        BackgroundTransparency = 1.000;
                        Size = UDim2.new(1, 0, 1, 0);
                        Font = "Gotham";
                        Text = bindName;
                        TextColor3 = Color3.fromRGB(255, 255, 255);
                        TextSize = 12.000;
                        TextXAlignment = "Left";
                    });
                    library:Create("TextButton", {
                        Name = "keybind";
                        BackgroundColor3 = Color3.fromRGB(34, 34, 34);
                        BorderColor3 = Color3.fromRGB(102, 41, 255);
                        ClipsDescendants = true;
                        Position = UDim2.new(1, -80, 0, 0);
                        Size = UDim2.new(0, 80, 1, 0);
                        AutoButtonColor = false;
                        Font = Enum.Font.SourceSans;
                        Text = input;
                        TextColor3 = Color3.fromRGB(255, 255, 255);
                        TextSize = 14.000;
                    });
                });

                local whitelistedType = {
                    [Enum.KeyCode.LeftShift] = "L-Shift",
                    [Enum.KeyCode.RightShift] = "R-Shift",
                    [Enum.KeyCode.LeftControl] = "L-Ctrl",
                    [Enum.KeyCode.RightControl] = "R-Ctrl",
                    [Enum.KeyCode.LeftAlt] = "L-Alt",
                    [Enum.KeyCode.RightAlt] = "R-Alt",
                    [Enum.KeyCode.CapsLock] = "CAPS",
                    [Enum.KeyCode.One] = "1",
                    [Enum.KeyCode.Two] = "2",
                    [Enum.KeyCode.Three] = "3",
                    [Enum.KeyCode.Four] = "4",
                    [Enum.KeyCode.Five] = "5",
                    [Enum.KeyCode.Six] = "6",
                    [Enum.KeyCode.Seven] = "7",
                    [Enum.KeyCode.Eight] = "8",
                    [Enum.KeyCode.Nine] = "9",
                    [Enum.KeyCode.Zero] = "0",
                    [Enum.KeyCode.KeypadOne] = "Num-1",
                    [Enum.KeyCode.KeypadTwo] = "Num-2",
                    [Enum.KeyCode.KeypadThree] = "Num-3",
                    [Enum.KeyCode.KeypadFour] = "Num-4",
                    [Enum.KeyCode.KeypadFive] = "Num-5",
                    [Enum.KeyCode.KeypadSix] = "Num-6",
                    [Enum.KeyCode.KeypadSeven] = "Num-7",
                    [Enum.KeyCode.KeypadEight] = "Num-8",
                    [Enum.KeyCode.KeypadNine] = "Num-9",
                    [Enum.KeyCode.KeypadZero] = "Num-0",
                    [Enum.KeyCode.Minus] = "-",
                    [Enum.KeyCode.Equals] = "=",
                    [Enum.KeyCode.Tilde] = "~",
                    [Enum.KeyCode.LeftBracket] = "[",
                    [Enum.KeyCode.RightBracket] = "]",
                    [Enum.KeyCode.RightParenthesis] = ")",
                    [Enum.KeyCode.LeftParenthesis] = "(",
                    [Enum.KeyCode.Semicolon] = ";",
                    [Enum.KeyCode.Quote] = "'",
                    [Enum.KeyCode.BackSlash] = "\\",
                    [Enum.KeyCode.Comma] = ",",
                    [Enum.KeyCode.Period] = ".",
                    [Enum.KeyCode.Slash] = "/",
                    [Enum.KeyCode.Asterisk] = "*",
                    [Enum.KeyCode.Plus] = "+",
                    [Enum.KeyCode.Period] = ".",
                    [Enum.KeyCode.Backquote] = "`",
                    [Enum.UserInputType.MouseButton1] = "Button-1",
                    [Enum.UserInputType.MouseButton2] = "Button-2",
                    [Enum.UserInputType.MouseButton3] = "Button-3",
                };

                holder.keybind.MouseButton1Click:Connect(function()
                    holder.keybind.Text = ". . .";
                    local connection;
                    connection = UserInputService.InputBegan:Connect(function(input)
                        connection:Disconnect();
                        wait();

                        local KeyCodeName = whitelistedType[input.KeyCode] or whitelistedType[input.UserInputType];

                        holder.keybind.Text = KeyCodeName or tostring(input.KeyCode):gsub("Enum.KeyCode.", "");
                        if(input.UserInputType == Enum.UserInputType.Keyboard) then
                            library.flags[bindName] = input.KeyCode;
                        else
                            library.flags[bindName] = input.UserInputType;
                        end;
                    end);
                end);
            end;

            function section:Button(buttonName, callback)
                local callback = callback or function() end;
                local holder = library:Create("Frame", {
                    Name = "holder";
                    Parent = boxContainer;
                    BackgroundTransparency = 1.000;
                    Position = UDim2.new(0, 10, 0, 148);
                    Size = UDim2.new(1, -20, 0, 18);
                    library:Create("TextButton", {
                        BackgroundColor3 = Color3.fromRGB(255, 255, 255);
                        Size = UDim2.new(1, 0, 1, 0);
                        BorderSizePixel = 0;
                        TextColor3 = Color3.fromRGB(255, 255, 255);
                        Text = "";
                        Name = "button";
                        AutoButtonColor = false;
                        library:Create("TextLabel", {
                            Name = "label";
                            BackgroundTransparency = 1;
                            Size = UDim2.new(1, 0, 1, 0);
                            Font = "SourceSans";
                            TextSize = 14;
                            TextColor3 = Color3.fromRGB(255, 255, 255);
                            Text = buttonName;
                        });
                        library:Create("UIGradient", {
                            Rotation = 90;
                            Color = ui_Settings.gradientColorSection;
                        });
                    });
                });

                holder.button.MouseButton1Click:Connect(callback);
            end;

            function section:Dropdown(name, list, callback)
                local callback = callback or function() end;
                local toggle = false;

                local holder = library:Create("Frame", {
                    Name = "holder";
                    BackgroundTransparency = 1.000;
                    LayoutOrder = 3;
                    Position = UDim2.new(0, 10, 0, 98);
                    Size = UDim2.new(1, -20, 0, 36);
                    Parent = boxContainer;
                    library:Create("TextLabel", {
                        Name = "label";
                        BackgroundTransparency = 1.000;
                        Size = UDim2.new(1, 0, 0, 18);
                        Font = Enum.Font.Gotham;
                        Text = name;
                        TextColor3 = Color3.fromRGB(255, 255, 255);
                        TextSize = 12.000;
                        TextXAlignment = Enum.TextXAlignment.Left;
                    });
                    library:Create("TextButton", {
                        Name = "dropdown";
                        BackgroundColor3 = Color3.fromRGB(102, 41, 255);
                        BorderColor3 = Color3.fromRGB(102, 41, 255);
                        Size = UDim2.new(1, 0, 0, 18);
                        AutoButtonColor = false;
                        Font = "SourceSans";
                        Text = "";
                        TextColor3 = Color3.fromRGB(0, 0, 0);
                        TextSize = 14.000;
                        Position = UDim2.new(0, 0, 0, 18);
                        library:Create("ImageLabel", {
                            Name = "icon";
                            BackgroundTransparency = 1.000;
                            Position = UDim2.new(1, -18, 0, 0);
                            Size = UDim2.new(0, 18, 0, 16);
                            Image = "http://www.roblox.com/asset/?id=4641587888";
                            ZIndex = 2;
                        });
                        library:Create("TextLabel", {
                            Name = "label";
                            BackgroundTransparency = 1.000;
                            Position = UDim2.new(0, 4, 0, 0);
                            Size = UDim2.new(1, -4, 0, 18);
                            Font = Enum.Font.Gotham;
                            Text = "Drop value";
                            TextColor3 = Color3.fromRGB(255, 255, 255);
                            TextSize = 12.000;
                            TextXAlignment = Enum.TextXAlignment.Left;
                            ZIndex = 2;
                        });
                        library:Create("Frame", {
                            Name = "dropframe";
                            BackgroundColor3 = Color3.fromRGB(32, 32, 32);
                            BorderColor3 = Color3.fromRGB(102, 41, 255);
                            BorderSizePixel = 0;
                            ClipsDescendants = true;
                            Position = UDim2.new(0, -1, 1, 1);
                            Size = UDim2.new(1, 2, 0, 0);
                            library:Create("UIListLayout", {
                                SortOrder = "LayoutOrder";
                                Padding = UDim.new(0, 2);
                            });
                        });
                        library:Create("Frame", {
                            Name = "fill";
                            BackgroundColor3 = Color3.fromRGB(255, 255, 255);
                            BorderSizePixel = 0;
                            Position = UDim2.new(0, 1, 0, 1);
                            Size = UDim2.new(1, 0, 1, 0);
                            library:Create("UIGradient", {
                                Rotation = 90;
                                Color = ui_Settings.gradientColorSection;
                            });
                        });
                    });
                });

                for i, v in next, list do
                    local button = library:Create("TextButton", {
                        Name = "button";
                        Text = v;
                        Parent = holder.dropdown.dropframe;
                        BackgroundColor3 = Color3.fromRGB(32, 32, 32);
                        BorderColor3 = Color3.fromRGB(255, 255, 255);
                        BorderSizePixel = 0;
                        Size = UDim2.new(1, 0, 0, 16);
                        Font = "SourceSans";
                        TextColor3 = Color3.fromRGB(255, 255, 255);
                        TextSize = 14.000;
                        ZIndex = 1;
                    });

                    button.MouseButton1Click:Connect(function()
                        toggle = false;
                        holder.dropdown.label.Text = v;
                        library:Tween(holder.dropdown.icon, {time = 0.1, Rotation = 180});
                        library:Tween(holder, {time = 0.1, Size = UDim2.new(1, -20, 0, 35)});
                        library:Tween(holder.dropdown.dropframe, {time = 0.1, Size = UDim2.new(1, 2, 0, 0)}, self.Update);
                        callback(button.Text);
                    end);
                end;

                holder.dropdown.MouseButton1Click:Connect(function()
                    toggle = not toggle;
                    local TotalY = 0;
                    for i, v in next, holder.dropdown.dropframe:GetChildren() do
                        if(v:IsA("TextButton")) then
                            TotalY = TotalY + v.AbsoluteSize.Y + 2;
                        end;
                    end;

                    if(toggle) then
                        library:Tween(holder.dropdown.icon, {time = 0.1, Rotation = 0});
                        library:Tween(holder, {time = 0.1, Size = UDim2.new(1, -20, 0, TotalY + 50)});
                        library:Tween(holder.dropdown.dropframe, {time = 0.1, Size = UDim2.new(1, 2, 0, TotalY)}, self.Update);
                    else
                        library:Tween(holder.dropdown.icon, {time = 0.1, Rotation = 180});
                        library:Tween(holder, {time = 0.1, Size = UDim2.new(1, -20, 0, 36)});
                        library:Tween(holder.dropdown.dropframe, {time = 0.1, Size = UDim2.new(1, 2, 0, 0)}, self.Update);
                    end;
                end);
            end;

            function section:ColorPicker(pickerName, defaultColor, callback)
                local callback = callback or function() end;
                local defaultColor = defaultColor or Color3.fromRGB(102, 41, 255);
                local rainbowToggle = false;
                local Mouse = Players.LocalPlayer:GetMouse();

                local holder = library:Create("Frame", {
                    Name = "holder";
                    Parent = boxContainer;
                    BackgroundTransparency = 1.000;
                    Position = UDim2.new(0, 10, 0, 172);
                    Size = UDim2.new(1, -20, 0, 18);
                    library:Create("TextLabel", {
                        Name = "label";
                        BackgroundTransparency = 1.000;
                        Size = UDim2.new(1, 0, 1, 0);
                        Font = "Gotham";
                        Text = pickerName;
                        TextColor3 = Color3.fromRGB(255, 255, 255);
                        TextSize = 12.000;
                        TextXAlignment = Enum.TextXAlignment.Left;
                    });
                    library:Create("TextButton", {
                        Name = "colorpicker";
                        BackgroundColor3 = Color3.fromRGB(34, 34, 34);
                        BorderColor3 = Color3.fromRGB(102, 41, 255);
                        Position = UDim2.new(1, -16, 0, 0);
                        Size = UDim2.new(0, 16, 0, 16);
                        AutoButtonColor = false;
                        Font = Enum.Font.SourceSans;
                        Text = "";
                        TextColor3 = Color3.fromRGB(0, 0, 0);
                        TextSize = 14.000;
                        library:Create("Frame", {
                            Name = "colorframe";
                            BackgroundColor3 = Color3.fromRGB(32, 32, 32);
                            BorderColor3 = Color3.fromRGB(102, 41, 255);
                            Position = UDim2.new(0, -148, 1, 6);
                            Size = UDim2.new(0, 144, 0, 139);
                            Visible = false;
                            ZIndex = 2;
                            library:Create("ImageButton", {
                                Name = "satval";
                                Image = "http://www.roblox.com/asset/?id=4650897272";
                                BorderSizePixel = 0;
                                AutoButtonColor = false;
                                BackgroundColor3 = defaultColor;
                                Position = UDim2.new(0, 4, 0, 3);
                                Size = UDim2.new(0, 110, 0, 102);
                                ZIndex = 2;
                                library:Create("TextButton", {
                                    Name = "picker";
                                    BackgroundColor3 = Color3.fromRGB(53, 53, 53);
                                    BackgroundTransparency = 0.500;
                                    BorderSizePixel = 0;
                                    Position = UDim2.new(0.5, 0, 0.5, 0);
                                    Size = UDim2.new(0, 5, 0, 5);
                                    ZIndex = 2;
                                    Text = "";
                                });
                            });
                            library:Create("TextButton", {
                                Name = "rainbow";
                                ZIndex = 2;
                                BackgroundColor3 = Color3.fromRGB(255, 255, 255);
                                BorderColor3 = Color3.fromRGB(255, 255, 255);
                                ClipsDescendants = true;
                                Position = UDim2.new(0, 5, 1, -25);
                                Size = UDim2.new(0, 133, 0, 20);
                                AutoButtonColor = false;
                                Font = "SourceSans";
                                Text = "";
                                TextColor3 = Color3.fromRGB(255, 255, 255);
                                TextSize = 14.000;
                                library:Create("UIGradient", {
                                    Color = ui_Settings.gradientColorSection;
                                    Rotation = -90;
                                });
                                library:Create("TextLabel", {
                                    Name = "label";
                                    Parent = button;
                                    BackgroundTransparency = 1.000;
                                    Size = UDim2.new(1, 0, 1, 0);
                                    Font = "SourceSans";
                                    Text = "Rainbow: OFF";
                                    TextColor3 = Color3.fromRGB(255, 255, 255);
                                    TextSize = 14.000;
                                    ZIndex = 2;
                                });
                            });
                            library:Create("ImageButton", {
                                Name = "hue";
                                AutoButtonColor = false;
                                ZIndex = 2;
                                Position = UDim2.new(0, 118, 0, 3);
                                Size = UDim2.new(0, 18, 0, 102);
                                Image = "http://www.roblox.com/asset/?id=4650897105";
                                library:Create("TextButton", {
                                    Name = "selector";
                                    BackgroundColor3 = Color3.fromRGB(53, 53, 53);
                                    BorderSizePixel = 0;
                                    Size = UDim2.new(1, 0, 0, 5);
                                    Text = "";
                                    ZIndex = 2;
                                });
                            });
                        });
                        library:Create("Frame", {
                            Name = "color";
                            BackgroundColor3 = defaultColor;
                            BorderSizePixel = 0;
                            Position = UDim2.new(0, 1, 0, 1);
                            Size = UDim2.new(0, 14, 0, 14);
                        });
                    });
                });


                local colorData = {
                    H = 1;
                    S = 1;
                    V = 1;
                };

                local Connection1;
                local Connection2;

                local function getXY(frame)
                    local x, y = Mouse.X - frame.AbsolutePosition.X, Mouse.Y - frame.AbsolutePosition.Y;
                    local maxX, maxY = frame.AbsoluteSize.X,frame.AbsoluteSize.Y;
                    x = math.clamp(x, 0, maxX);
                    y = math.clamp(y, 0, maxY);
                    return x / maxX, y / maxY;
                end;

                local function Update()
                    local Color = Color3.fromHSV(colorData.H, colorData.S, colorData.V);
                    holder.colorpicker.color.BackgroundColor3 = Color;
                    holder.colorpicker.colorframe.satval.BackgroundColor3 = Color3.fromHSV(colorData.H, 1, 1);
                    callback(Color);
                end;

                holder.colorpicker.MouseButton1Click:Connect(function()
                    toggle = not toggle;
                    holder.colorpicker.colorframe.Visible = toggle;
                end);

                UserInputService.InputEnded:Connect(function(i)
                    if i.UserInputType == Enum.UserInputType.MouseButton1 then
                        if(Connection1) then
                            Connection1:Disconnect();
                            Connection1 = nil;
                        end;
                        if(Connection2) then
                            Connection2:Disconnect();
                            Connection2 = nil;
                        end;
                        isFocused = false;
                    end;
                end);

                holder.colorpicker.colorframe.rainbow.MouseButton1Click:Connect(function()
                    rainbowToggle = not rainbowToggle;
                    holder.colorpicker.colorframe.rainbow.label.Text = rainbowToggle and "Rainbow: ON" or "Rainbow: OFF";

                    if(rainbowToggle) then
                        repeat
                            library:Tween(holder.colorpicker.colorframe.hue.selector, {time = 0.1, Position = UDim2.new(0, 0, library.rainbowI, 0)});
                            holder.colorpicker.colorframe.satval.BackgroundColor3 = Color3.fromHSV(1 - library.rainbowI, 1, 1);
                            holder.colorpicker.color.BackgroundColor3 = library.rainbowVal;
                            callback(library.rainbowVal);
                            RunService.Heartbeat:Wait();
                        until not rainbowToggle;
                    end;
                end);

                holder.colorpicker.colorframe.satval.InputBegan:Connect(function(i)
                    if i.UserInputType == Enum.UserInputType.MouseButton1 then
                        if(Connection1) then
                            Connection1:Disconnect();
                        end;
                        Connection1 = RunService.Heartbeat:Connect(function()
                            local X, Y = getXY(holder.colorpicker.colorframe.satval);

                            holder.colorpicker.colorframe.satval.picker.Position = UDim2.new(X, 0, Y, 0);
                            colorData.S = X;
                            colorData.V = 1 - Y;
                            Update();
                        end);
                    end;
                end);

                holder.colorpicker.colorframe.hue.InputBegan:Connect(function(i)
                    if i.UserInputType == Enum.UserInputType.MouseButton1 then
                        if(Connection2) then
                            Connection2:Disconnect();
                        end;

                        Connection2 = RunService.Heartbeat:Connect(function()
                            local X, Y = getXY(holder.colorpicker.colorframe.hue);

                            colorData.H = 1 - Y;
                            holder.colorpicker.colorframe.hue.selector.Position = UDim2.new(0, 0, Y, 0);
                            Update();
                        end);
                    end;
                end);
            end;

            return section;
        end;
    end;

    return library;
end;

return initLibrary();
