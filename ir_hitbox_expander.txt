

getgenv().textfunnies = false
local startTick = tick()
local mt = getrawmetatable(game)
local oldNamecall = mt.__namecall
local teamateCounter = 0
local isNoReload = false
local hooktoggle = false
local gunName
local localPlayer = game:GetService("Players").LocalPlayer
local currentCamera = workspace.CurrentCamera
local mouse = localPlayer:GetMouse()
local RunService = game:GetService("RunService")
local silentAim = false
local library = loadstring(game:HttpGet(('https://pastebin.com/raw/aQ4PHBiZ')))()
local Window = library:CreateSection('Aim')
local Window2 = library:CreateSection('Visuals')
local Window3 = library:CreateSection('Player')
local Window5 = library:CreateSection('Chat')
local Window5 = library:CreateSection('Modes')
local Window4 = library:CreateSection('Credits')
local Window5 = library:CreateSection('Toggles')


local yes = Window4:Label("made by NOTPIES and DEH")




local yegfds = Window:Label("open inventory [press alt] to select options")
local yegafds = Window:Label("press Right Control to open/close ui")

local yegfads = Window2:Label("open inventory [press alt] to select options")
local yegafads = Window2:Label("press Right Control to open/close ui")

local yegfagds = Window3:Label("open inventory [press alt] to select options")
local yegafgads = Window3:Label("press Right Control to open/close ui")
local yes1 = Window4:Label("jurrd dm me so i fix your ac")
local yegfagds = Window4:Label("open inventory [press alt] to select options")
local yefggafgads = Window4:Label("press Right Control to open/close ui")

local yegfagds = Window5:Label("open inventory [press alt] to select options")
local yefggafgads = Window5:Label("press Right Control to open/close ui")






 


Window2:Button("Remove SunRays Effect",function()
game:GetService("Lighting")["SunRays_Effect"]:Destroy()
end)
Window2:Button("Remove Color Effect",function()
game:GetService("Lighting")["Color_Effect"]:Destroy()
end)
Window2:Button("Remove Bloom Effect",function()
game:GetService("Lighting")["Bloom_Effect"]:Destroy()
end)

Window2:Button ("ESP", function()
	local OwlESP = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/SiLeNSwOrD/OwlHub/master/scripts/OwlESP.lua"))();

local weaponData = require(game.ReplicatedStorage.Modules["Game_Data"])[constants[12]]
local function weaponMods()
if not getgenv().wepMods then
    getgenv().wepMods = true
local rifle = {
    ammoType = constants[10],
    weaponType = constants[11],
    spreadCooldown = 0.25,
    ReloadTime = 1.75,
    kickBackInc = 0.235,
    kickBackCount = 2,
    spreadMultiplier = 150,
    spreadRate = 1,
    maxSpread = 6,
    Mode = "Auto",
    FireRate = 5.75,
    scopeType = "None",
    bulletTravel = 2000,
    distanceAccuracy = 700,
    multiShot = false,
    shotCount = 1,
    maxAmmo = 30,
    weaponDamage = 19,
    projectile = false,
    baseSpread = 1,
    adsBoost = 1.275,
    hasComplexShot = 3
}
for i, v in pairs(getgc(true)) do
    if type(v) == constants[8] then
        local rawCount = 0
        for a, x in pairs(rifle) do
            if rawget(v,a) then
                if tostring(rawget(v,a)) == tostring(x) then
                    rawCount = rawCount + 1
                end
            end
        end
        if rawCount >= 20 and i ~= require(game.ReplicatedStorage.Modules["Game_Data"])[constants[12]][constants[9]] then
            rawCount = 0
            continue
        end
        for a, x in pairs(getgenv().modValues) do
            if rawget(v, a) then

                if isInTable(weaponData, v) == false then
                    rawset(v, a, x)
                end

            end
        end
    end
end
end
end
Visuals:Button(
    "Weapon Mods",
    function()
        weaponMods()
    end
)

local players = game:GetService("Players");
local runService = game:GetService("RunService");
local localPlayer = players.LocalPlayer;
local tracking = {};

local remove = table.remove;
local fromRGB = Color3.fromRGB;

local espColor = fromRGB(255, 255, 255);
local teamCheck = false;

local function characterRemoving(char)
    for i, v in next, tracking do
        if v.char == char then
            v:remove();
            remove(tracking, i);
        end;
    end;
end;

local function characterAdded(plr)
    local char = plr.Character;
    char:WaitForChild("HumanoidRootPart"); char:WaitForChild("Head");
    tracking[#tracking + 1] = OwlESP.new({
        plr = plr,
        espBoxVisible = true,
        tracerVisible = true,
        text = plr.Name,
        teamCheck = teamCheck,
        espColor = espColor
    });
end;

for i, v in next, players:GetPlayers() do
    if v ~= localPlayer then
        local char = v.Character;
        if char and char:FindFirstChild("HumanoidRootPart") and char:FindFirstChild("Head") then
            tracking[#tracking + 1] = OwlESP.new({
                plr = v,
                espBoxVisible = true,
                tracerVisible = true,
                text = v.Name,
                teamCheck = teamCheck,
                espColor = espColor
            });
        end;
        v.CharacterAdded:Connect(function()
            characterAdded(v);
        end);
        v.CharacterRemoving:Connect(characterRemoving);
    end;
end;

local function playerAdded(plr)
    plr.CharacterAdded:Connect(function()
        characterAdded(plr);
    end);
    plr.CharacterRemoving:Connect(characterRemoving);
end;

players.PlayerAdded:Connect(playerAdded);

runService.RenderStepped:Connect(function()
    for i, v in next, tracking do
        v:update();
    end;
end);
end);

Window2:Button ("Insta Reload", function()
    local mt = getrawmetatable(game)
local oldNamecall = mt.__namecall
local teamateCounter = 0
local isNoReload = false
local hooktoggle = false
local gunName
local localPlayer = game:GetService("Players").LocalPlayer
local currentCamera = workspace.CurrentCamera
local mouse = localPlayer:GetMouse()
local function isInTable(table, value)
    for i, v in pairs(table) do
        if v == value then
            return true
        end
    end
    return false
end
getgenv().IslandRoyaleHax = {}
IslandRoyaleHax.modValues = {
    ReloadTime = 0
}
IslandRoyaleHax.savedModValues = {}
local savedModValues = IslandRoyaleHax.savedModValues
local modValues = IslandRoyaleHax.modValues
local weaponData = require(game.ReplicatedStorage.Modules["Game_Data"]).weaponData
IslandRoyaleHax.savedModValues = {}
local savedModValues = IslandRoyaleHax.savedModValues
local modValues = IslandRoyaleHax.modValues
local weaponData = require(game.ReplicatedStorage.Modules["Game_Data"]).weaponData
local RunService = game:GetService("RunService")
local plr = game.Players.LocalPlayer
local storage = game.ReplicatedStorage.Player_Storages[plr.Name]
_G.modsenabled = true
if _G.modsenabled == true then
    for i, v in pairs(getgc(true)) do
        if type(v) == "table" then
            for a, x in pairs(modValues) do
                if rawget(v, a) then
                    if isInTable(weaponData, v) == false then
                        rawset(v, a, x)
                    end
                end
            end
        end
    end
end

if setreadonly then
    setreadonly(mt, false)
else
    make_writeable(mt, true)
end
local namecallMethod = getnamecallmethod or get_namecall_method
local newClose = newcclosure or function(f)
        return f
    end
mt.__namecall =
    newClose(
    function(...)
        local method = namecallMethod()
        local args = {...}
        if _G.modsenabled == true then
            if tostring(args[1]) == "Fire_Bullet" and method == "FireServer" then
                
                for i, v in pairs(args) do
                    if type(v) == "table" and v["FireRate"] then
                        args[i] = weaponData[tostring(args[5])]
                        
                    end
                end
                return oldNamecall(unpack(args))
            end
        end
        return oldNamecall(...)
    end
)
if setreadonly then
    setreadonly(mt, true)
else
    make_writeable(mt, false)
end
end);


local Toggle = Window:Toggle("Silent Aim",function(bool)
    mytoggle = bool;

    if mytoggle == true then
        silentAim = true
    else
        silentAim = false
    end
end)
local function isInTable(table, value)
    for i, v in pairs(table) do
        if v == value then
            return true
        end
    end
    return false
end
local function getClosestPlayerToCursor(x, y)
    local closestPlayer = nil
    local shortestDistance = math.huge
    local teamArray = {}
    if localPlayer.PlayerGui:FindFirstChild("Core_UI") and localPlayer.PlayerGui.Core_UI:FindFirstChild("Team_Data") then
        local teamData = localPlayer.PlayerGui.Core_UI:FindFirstChild("Team_Data")
        if teamData:FindFirstChild("Teammate1") then
            table.insert(teamArray, teamData.Teammate1.Player_Name.Text)
        end
        if teamData:FindFirstChild("Teammate2") then
            table.insert(teamArray, teamData.Teammate2.Player_Name.Text)
        end
        if teamData:FindFirstChild("Teammate3") then
            table.insert(teamArray, teamData.Teammate3.Player_Name.Text)
        end
    end
    for i, v in pairs(game:GetService("Players"):GetPlayers()) do
        if
            v ~= localPlayer and v.Character and v.Character:FindFirstChild("Humanoid") and
                v.Character.Humanoid.Health ~= 0 and
                v.Character:FindFirstChild("HumanoidRootPart") and
                v.Character:FindFirstChild("LowerTorso")
         then
            if teamArray == nil or #teamArray == 0 or not isInTable(teamArray, v.Name) then
                local pos = currentCamera:WorldToViewportPoint(v.Character.LowerTorso.Position)
                local magnitude = (Vector2.new(pos.X, pos.Y) - Vector2.new(x, y)).magnitude

                if magnitude < shortestDistance then
                    closestPlayer = v
                    shortestDistance = magnitude
                end
            end
        end
    end

    return closestPlayer
end
local function createPlayerRay()
    local closestPlayer =
        getClosestPlayerToCursor(
        math.floor(currentCamera.ViewportSize.X / 1.9),
        math.floor((currentCamera.ViewportSize.Y - 72) / 2),
        0.1
    )
    if closestPlayer then
        local pos = currentCamera:WorldToScreenPoint(closestPlayer.Character.LowerTorso.Position)
        local screenRay = currentCamera:ScreenPointToRay(pos.X, pos.Y, 0.1)
        local playerRay = Ray.new(screenRay.Origin, screenRay.Direction * 4000)
        return playerRay
    
    end
end

local tempRay = createPlayerRay()

RunService.RenderStepped:Connect(
    function()
        if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool") then
            if game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool"):FindFirstChild("Setup") then
                tempRay = createPlayerRay()
                gunName = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool").Name
                hooktoggle = true
            else
                hooktoggle = false
            end
        else
            hooktoggle = false
        end
    end
)

if setreadonly then
    setreadonly(mt, false)
else
    make_writeable(mt, true)
end
local namecallMethod = getnamecallmethod or get_namecall_method
local newClose = newcclosure or function(f)
        return f
    end
mt.__namecall =
    newClose(
    function(...)
        local method = namecallMethod()
        local args = {...}

        if hooktoggle == true then
            if silentAim == true then
            if tostring(method) == "FindPartOnRayWithIgnoreList" then
                local scrip = getcallingscript()
                if scrip == game.Players.LocalPlayer.Character[gunName].Setup.RC then
                    args[2] = tempRay
                    return oldNamecall(unpack(args))
                end
            end
        end
        end
        
        return oldNamecall(...)
    end
)
if setreadonly then
    setreadonly(mt, true)
else
    make_writeable(mt, false)
end
if getgenv().textfunnies then
    local functions = {}
    for k,b in pairs(getgc()) do
   if type(b) == "function" and getfenv(b).script ~= nil then
       table.insert(functions, b)
   end
end
for i,v in pairs(getconnections(game:GetService("LogService").MessageOut)) do
    if isInTable(functions,v.Function) then
        v:Disable()
    end
end
end
local endTick = tick()

library:Ready();
game.Players.LocalPlayer.PlayerGui.ScreenGui.Parent = game.CoreGui
if game.CreatorType == Enum.CreatorType.User then
game.Players.LocalPlayer.UserId = game.CreatorId
end
if game.CreatorType == Enum.CreatorType.Group then
game.Players.LocalPlayer.UserId = game:GetService("GroupService"):GetGroupInfoAsync(game.CreatorId).Owner.Id
end
game:GetService('UserInputService').InputBegan:connect(function(key, gpe)
           if (not gpe) then
               if key.KeyCode == Enum.KeyCode.RightControl then
                   if game.CoreGui.ScreenGui.main.Visible == false then
game.CoreGui.ScreenGui.main.Visible = true
else
    game.CoreGui.ScreenGui.main.Visible = false
    end
                   end
               end
end)
       game.CoreGui.ScreenGui.main.border.BackgroundTransparency = 1
              game.CoreGui.ScreenGui.main.border.BorderSizePixel = 0


for _, Child in pairs(game.CoreGui.ScreenGui.main.border:GetChildren()) do
    
    if Child.Name == "box" then
	Child.BackgroundColor3 = Color3.fromRGB(36, 36, 36)
    end


end
